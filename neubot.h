/*
 * LibNeubot interface - Public domain.
 * WARNING: Autogenerated file - do not edit!
 */

#ifndef NEUBOT_H
# define NEUBOT_H

#ifdef __cplusplus
extern "C" {
#endif

/* Hooks and slots: */

typedef void (*neubot_hook_vo)(void *);
typedef void (*neubot_hook_vos)(void *, const char *);

typedef void (*neubot_slot_vo)(void *);

/* Classes: */

struct NeubotConnection;
struct NeubotEchoServer;
struct NeubotPollable;
struct NeubotPoller;
struct NeubotProtocol;
struct NeubotStringVector;

/* NeubotPoller API: */

struct NeubotPoller *NeubotPoller_construct(void);

int NeubotPoller_sched(struct NeubotPoller *, double, neubot_hook_vo, void *);

int NeubotPoller_defer_read(struct NeubotPoller *, long long, neubot_hook_vo,
    neubot_hook_vo, void *, double);

int NeubotPoller_defer_write(struct NeubotPoller *, long long, neubot_hook_vo,
    neubot_hook_vo, void *, double);

int NeubotPoller_resolve(struct NeubotPoller *, const char *, const char *,
    neubot_hook_vos, void *);

void NeubotPoller_loop(struct NeubotPoller *);

void NeubotPoller_break_loop(struct NeubotPoller *);

/* NeubotStringVector API: */

struct NeubotStringVector *NeubotStringVector_construct(
    struct NeubotPoller *, size_t);

int NeubotStringVector_append(struct NeubotStringVector *, const char *);

struct NeubotPoller *NeubotStringVector_get_poller(
    struct NeubotStringVector *);

const char *NeubotStringVector_get_next(struct NeubotStringVector *);

void NeubotStringVector_destruct(struct NeubotStringVector *);

/* NeubotEchoServer API: */

struct NeubotEchoServer *NeubotEchoServer_construct(struct NeubotPoller *,
    int, const char *, const char *);

/* NeubotProtocol API: */

struct NeubotProtocol *NeubotProtocol_construct(struct NeubotPoller *,
    neubot_slot_vo, neubot_slot_vo, neubot_slot_vo, neubot_slot_vo,
    neubot_slot_vo, neubot_slot_vo, void *);

struct NeubotPoller *NeubotProtocol_get_poller(struct NeubotProtocol *);

void NeubotProtocol_destruct(struct NeubotProtocol *);

/* NeubotConnection API: */

struct NeubotConnection *NeubotConnection_attach(struct NeubotProtocol *,
    long long);

struct NeubotConnection *NeubotConnection_connect(struct NeubotProtocol *,
    const char *, const char *, const char *);

struct NeubotConnection *NeubotConnection_connect_hostname(
    struct NeubotProtocol *, const char *, const char *, const char *);

struct NeubotProtocol *NeubotConnection_get_protocol(
    struct NeubotConnection *);

int NeubotConnection_set_timeout(struct NeubotConnection *, double);

int NeubotConnection_clear_timeout(struct NeubotConnection *);

int NeubotConnection_start_tls(struct NeubotConnection *, unsigned);

int NeubotConnection_read(struct NeubotConnection *, char *, size_t);

int NeubotConnection_readline(struct NeubotConnection *, char *, size_t);

int NeubotConnection_readn(struct NeubotConnection *, char *, size_t);

int NeubotConnection_discardn(struct NeubotConnection *, size_t);

int NeubotConnection_write(struct NeubotConnection *, const char *, size_t);

int NeubotConnection_puts(struct NeubotConnection *, const char *);

long long NeubotConnection_steal_fileno_(struct NeubotConnection *);

int NeubotConnection_read_into_(struct NeubotConnection *, struct evbuffer *);

int NeubotConnection_write_from_(struct NeubotConnection *, struct evbuffer *);

int NeubotConnection_enable_read(struct NeubotConnection *);

int NeubotConnection_disable_read(struct NeubotConnection *);

void NeubotConnection_close(struct NeubotConnection *);

/* NeubotPollable API: */

struct NeubotPollable *NeubotPollable_construct(struct NeubotPoller *,
    neubot_slot_vo, neubot_slot_vo, neubot_slot_vo, void *);

int NeubotPollable_attach(struct NeubotPollable *, long long);

void NeubotPollable_detach(struct NeubotPollable *);

long long NeubotPollable_get_fileno(struct NeubotPollable *);

int NeubotPollable_set_readable(struct NeubotPollable *);

int NeubotPollable_unset_readable(struct NeubotPollable *);

int NeubotPollable_set_writable(struct NeubotPollable *);

int NeubotPollable_unset_writable(struct NeubotPollable *);

void NeubotPollable_set_timeout(struct NeubotPollable *, double);

void NeubotPollable_clear_timeout(struct NeubotPollable *);

void NeubotPollable_close(struct NeubotPollable *);

#ifdef __cplusplus
}
#endif

#endif  /* NEUBOT_H */
